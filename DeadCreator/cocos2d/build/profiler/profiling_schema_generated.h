// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PROFILINGSCHEMA_SIMPLEPROFILER_H_
#define FLATBUFFERS_GENERATED_PROFILINGSCHEMA_SIMPLEPROFILER_H_

#include "flatbuffers/flatbuffers.h"

namespace SimpleProfiler {

struct Element;

struct Data;

struct Element FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_CALLS = 6,
    VT_AVG_TIME = 8,
    VT_MIN_TIME = 10,
    VT_MAX_TIME = 12,
    VT_USAGE = 14,
    VT_CHILDREN = 16
  };
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  int32_t calls() const { return GetField<int32_t>(VT_CALLS, 0); }
  float avg_time() const { return GetField<float>(VT_AVG_TIME, 0.0f); }
  float min_time() const { return GetField<float>(VT_MIN_TIME, 0.0f); }
  float max_time() const { return GetField<float>(VT_MAX_TIME, 0.0f); }
  float usage() const { return GetField<float>(VT_USAGE, 0.0f); }
  const flatbuffers::Vector<flatbuffers::Offset<Element>> *children() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Element>> *>(VT_CHILDREN); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_CALLS) &&
           VerifyField<float>(verifier, VT_AVG_TIME) &&
           VerifyField<float>(verifier, VT_MIN_TIME) &&
           VerifyField<float>(verifier, VT_MAX_TIME) &&
           VerifyField<float>(verifier, VT_USAGE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHILDREN) &&
           verifier.Verify(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
};

struct ElementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Element::VT_NAME, name); }
  void add_calls(int32_t calls) { fbb_.AddElement<int32_t>(Element::VT_CALLS, calls, 0); }
  void add_avg_time(float avg_time) { fbb_.AddElement<float>(Element::VT_AVG_TIME, avg_time, 0.0f); }
  void add_min_time(float min_time) { fbb_.AddElement<float>(Element::VT_MIN_TIME, min_time, 0.0f); }
  void add_max_time(float max_time) { fbb_.AddElement<float>(Element::VT_MAX_TIME, max_time, 0.0f); }
  void add_usage(float usage) { fbb_.AddElement<float>(Element::VT_USAGE, usage, 0.0f); }
  void add_children(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Element>>> children) { fbb_.AddOffset(Element::VT_CHILDREN, children); }
  ElementBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ElementBuilder &operator=(const ElementBuilder &);
  flatbuffers::Offset<Element> Finish() {
    auto o = flatbuffers::Offset<Element>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<Element> CreateElement(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   int32_t calls = 0,
   float avg_time = 0.0f,
   float min_time = 0.0f,
   float max_time = 0.0f,
   float usage = 0.0f,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Element>>> children = 0) {
  ElementBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_usage(usage);
  builder_.add_max_time(max_time);
  builder_.add_min_time(min_time);
  builder_.add_avg_time(avg_time);
  builder_.add_calls(calls);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ELEMENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Element>> *elements() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Element>> *>(VT_ELEMENTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ELEMENTS) &&
           verifier.Verify(elements()) &&
           verifier.VerifyVectorOfTables(elements()) &&
           verifier.EndTable();
  }
};

struct DataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_elements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Element>>> elements) { fbb_.AddOffset(Data::VT_ELEMENTS, elements); }
  DataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DataBuilder &operator=(const DataBuilder &);
  flatbuffers::Offset<Data> Finish() {
    auto o = flatbuffers::Offset<Data>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Data> CreateData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Element>>> elements = 0) {
  DataBuilder builder_(_fbb);
  builder_.add_elements(elements);
  return builder_.Finish();
}

inline const SimpleProfiler::Data *GetData(const void *buf) { return flatbuffers::GetRoot<SimpleProfiler::Data>(buf); }

inline bool VerifyDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<SimpleProfiler::Data>(); }

inline void FinishDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<SimpleProfiler::Data> root) { fbb.Finish(root); }

}  // namespace SimpleProfiler

#endif  // FLATBUFFERS_GENERATED_PROFILINGSCHEMA_SIMPLEPROFILER_H_
