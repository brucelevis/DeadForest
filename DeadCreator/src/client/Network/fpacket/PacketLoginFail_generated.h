// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETLOGINFAIL_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETLOGINFAIL_FPACKET_H_

#include "flatbuffers.h"

namespace fpacket {

struct PacketLoginFail;

struct PacketLoginFail FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR_CODE = 4
  };
  int32_t error_code() const { return GetField<int32_t>(VT_ERROR_CODE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct PacketLoginFailBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(int32_t error_code) { fbb_.AddElement<int32_t>(PacketLoginFail::VT_ERROR_CODE, error_code, 0); }
  PacketLoginFailBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketLoginFailBuilder &operator=(const PacketLoginFailBuilder &);
  flatbuffers::Offset<PacketLoginFail> Finish() {
    auto o = flatbuffers::Offset<PacketLoginFail>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<PacketLoginFail> CreatePacketLoginFail(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t error_code = 0) {
  PacketLoginFailBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

inline const fpacket::PacketLoginFail *GetPacketLoginFail(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketLoginFail>(buf); }

inline bool VerifyPacketLoginFailBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketLoginFail>(); }

inline void FinishPacketLoginFailBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketLoginFail> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETLOGINFAIL_FPACKET_H_
