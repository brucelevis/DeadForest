// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETLOGIN_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETLOGIN_FPACKET_H_

#include "flatbuffers.h"

namespace fpacket {

struct PacketLogin;

struct PacketLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PID = 4
  };
  int32_t pid() const { return GetField<int32_t>(VT_PID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PID) &&
           verifier.EndTable();
  }
};

struct PacketLoginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pid(int32_t pid) { fbb_.AddElement<int32_t>(PacketLogin::VT_PID, pid, 0); }
  PacketLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketLoginBuilder &operator=(const PacketLoginBuilder &);
  flatbuffers::Offset<PacketLogin> Finish() {
    auto o = flatbuffers::Offset<PacketLogin>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<PacketLogin> CreatePacketLogin(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t pid = 0) {
  PacketLoginBuilder builder_(_fbb);
  builder_.add_pid(pid);
  return builder_.Finish();
}

inline const fpacket::PacketLogin *GetPacketLogin(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketLogin>(buf); }

inline bool VerifyPacketLoginBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketLogin>(); }

inline void FinishPacketLoginBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketLogin> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETLOGIN_FPACKET_H_
