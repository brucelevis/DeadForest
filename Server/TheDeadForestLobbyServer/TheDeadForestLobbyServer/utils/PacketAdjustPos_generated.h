// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETADJUSTPOS_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETADJUSTPOS_FPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace fpacket {

struct PacketAdjustPos;

struct PacketAdjustPos FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_POS_X = 6,
    VT_POS_Y = 8,
    VT_POS_H = 10
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  float pos_x() const { return GetField<float>(VT_POS_X, 0.0f); }
  float pos_y() const { return GetField<float>(VT_POS_Y, 0.0f); }
  float pos_h() const { return GetField<float>(VT_POS_H, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_POS_X) &&
           VerifyField<float>(verifier, VT_POS_Y) &&
           VerifyField<float>(verifier, VT_POS_H) &&
           verifier.EndTable();
  }
};

struct PacketAdjustPosBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(PacketAdjustPos::VT_ID, id, 0); }
  void add_pos_x(float pos_x) { fbb_.AddElement<float>(PacketAdjustPos::VT_POS_X, pos_x, 0.0f); }
  void add_pos_y(float pos_y) { fbb_.AddElement<float>(PacketAdjustPos::VT_POS_Y, pos_y, 0.0f); }
  void add_pos_h(float pos_h) { fbb_.AddElement<float>(PacketAdjustPos::VT_POS_H, pos_h, 0.0f); }
  PacketAdjustPosBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketAdjustPosBuilder &operator=(const PacketAdjustPosBuilder &);
  flatbuffers::Offset<PacketAdjustPos> Finish() {
    auto o = flatbuffers::Offset<PacketAdjustPos>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<PacketAdjustPos> CreatePacketAdjustPos(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   float pos_x = 0.0f,
   float pos_y = 0.0f,
   float pos_h = 0.0f) {
  PacketAdjustPosBuilder builder_(_fbb);
  builder_.add_pos_h(pos_h);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const fpacket::PacketAdjustPos *GetPacketAdjustPos(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketAdjustPos>(buf); }

inline bool VerifyPacketAdjustPosBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketAdjustPos>(); }

inline void FinishPacketAdjustPosBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketAdjustPos> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETADJUSTPOS_FPACKET_H_
