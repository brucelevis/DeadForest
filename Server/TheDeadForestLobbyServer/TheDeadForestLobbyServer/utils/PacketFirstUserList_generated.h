// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETFIRSTUSERLIST_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETFIRSTUSERLIST_FPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace fpacket {

struct PacketFirstUserList;

struct PacketFirstUserList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_USERS = 6
  };
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *users() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_USERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USERS) &&
           verifier.Verify(users()) &&
           verifier.VerifyVectorOfStrings(users()) &&
           verifier.EndTable();
  }
};

struct PacketFirstUserListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(PacketFirstUserList::VT_ID, id); }
  void add_users(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> users) { fbb_.AddOffset(PacketFirstUserList::VT_USERS, users); }
  PacketFirstUserListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketFirstUserListBuilder &operator=(const PacketFirstUserListBuilder &);
  flatbuffers::Offset<PacketFirstUserList> Finish() {
    auto o = flatbuffers::Offset<PacketFirstUserList>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketFirstUserList> CreatePacketFirstUserList(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> users = 0) {
  PacketFirstUserListBuilder builder_(_fbb);
  builder_.add_users(users);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const fpacket::PacketFirstUserList *GetPacketFirstUserList(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketFirstUserList>(buf); }

inline bool VerifyPacketFirstUserListBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketFirstUserList>(); }

inline void FinishPacketFirstUserListBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketFirstUserList> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETFIRSTUSERLIST_FPACKET_H_
