// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETSIGNUP_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETSIGNUP_FPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace fpacket {

struct PacketSignup;

struct PacketSignup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PID = 4,
    VT_ID = 6
  };
  int32_t pid() const { return GetField<int32_t>(VT_PID, 0); }
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           verifier.EndTable();
  }
};

struct PacketSignupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pid(int32_t pid) { fbb_.AddElement<int32_t>(PacketSignup::VT_PID, pid, 0); }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(PacketSignup::VT_ID, id); }
  PacketSignupBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketSignupBuilder &operator=(const PacketSignupBuilder &);
  flatbuffers::Offset<PacketSignup> Finish() {
    auto o = flatbuffers::Offset<PacketSignup>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketSignup> CreatePacketSignup(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t pid = 0,
   flatbuffers::Offset<flatbuffers::String> id = 0) {
  PacketSignupBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_pid(pid);
  return builder_.Finish();
}

inline const fpacket::PacketSignup *GetPacketSignup(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketSignup>(buf); }

inline bool VerifyPacketSignupBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketSignup>(); }

inline void FinishPacketSignupBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketSignup> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETSIGNUP_FPACKET_H_
