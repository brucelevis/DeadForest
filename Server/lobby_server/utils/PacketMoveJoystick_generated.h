// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETMOVEJOYSTICK_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETMOVEJOYSTICK_FPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace fpacket {

struct PacketMoveJoystick;

struct PacketMoveJoystick FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_IS_TOUCHED = 6,
    VT_DIR_X = 8,
    VT_DIR_Y = 10
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  bool is_touched() const { return GetField<uint8_t>(VT_IS_TOUCHED, 0) != 0; }
  float dir_x() const { return GetField<float>(VT_DIR_X, 0.0f); }
  float dir_y() const { return GetField<float>(VT_DIR_Y, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_IS_TOUCHED) &&
           VerifyField<float>(verifier, VT_DIR_X) &&
           VerifyField<float>(verifier, VT_DIR_Y) &&
           verifier.EndTable();
  }
};

struct PacketMoveJoystickBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(PacketMoveJoystick::VT_ID, id, 0); }
  void add_is_touched(bool is_touched) { fbb_.AddElement<uint8_t>(PacketMoveJoystick::VT_IS_TOUCHED, static_cast<uint8_t>(is_touched), 0); }
  void add_dir_x(float dir_x) { fbb_.AddElement<float>(PacketMoveJoystick::VT_DIR_X, dir_x, 0.0f); }
  void add_dir_y(float dir_y) { fbb_.AddElement<float>(PacketMoveJoystick::VT_DIR_Y, dir_y, 0.0f); }
  PacketMoveJoystickBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketMoveJoystickBuilder &operator=(const PacketMoveJoystickBuilder &);
  flatbuffers::Offset<PacketMoveJoystick> Finish() {
    auto o = flatbuffers::Offset<PacketMoveJoystick>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<PacketMoveJoystick> CreatePacketMoveJoystick(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   bool is_touched = false,
   float dir_x = 0.0f,
   float dir_y = 0.0f) {
  PacketMoveJoystickBuilder builder_(_fbb);
  builder_.add_dir_y(dir_y);
  builder_.add_dir_x(dir_x);
  builder_.add_id(id);
  builder_.add_is_touched(is_touched);
  return builder_.Finish();
}

inline const fpacket::PacketMoveJoystick *GetPacketMoveJoystick(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketMoveJoystick>(buf); }

inline bool VerifyPacketMoveJoystickBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketMoveJoystick>(); }

inline void FinishPacketMoveJoystickBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketMoveJoystick> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETMOVEJOYSTICK_FPACKET_H_
