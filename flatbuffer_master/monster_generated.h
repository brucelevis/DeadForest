// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MONSTER_MYGAME_SAMPLE_H_
#define FLATBUFFERS_GENERATED_MONSTER_MYGAME_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace MyGame {
    namespace Sample {
        
        struct Vec3;
        
        struct Monster;
        
        struct Weapon;
        
        enum Color {
            Color_Red = 0,
            Color_Green = 1,
            Color_Blue = 2,
            Color_MIN = Color_Red,
            Color_MAX = Color_Blue
        };
        
        inline const char **EnumNamesColor() {
            static const char *names[] = { "Red", "Green", "Blue", nullptr };
            return names;
        }
        
        inline const char *EnumNameColor(Color e) { return EnumNamesColor()[static_cast<int>(e)]; }
        
        MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
        private:
            float x_;
            float y_;
            float z_;
            
        public:
            Vec3(float _x, float _y, float _z)
            : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)) { }
            
            float x() const { return flatbuffers::EndianScalar(x_); }
            float y() const { return flatbuffers::EndianScalar(y_); }
            float z() const { return flatbuffers::EndianScalar(z_); }
        };
        STRUCT_END(Vec3, 12);
        
        struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
            enum {
                VT_POS = 4,
                VT_MANA = 6,
                VT_HP = 8,
                VT_NAME = 10,
                VT_COLOR = 14,
                VT_WEAPONS = 16
            };
            const Vec3 *pos() const { return GetStruct<const Vec3 *>(VT_POS); }
            int16_t mana() const { return GetField<int16_t>(VT_MANA, 150); }
            int16_t hp() const { return GetField<int16_t>(VT_HP, 100); }
            const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
            Color color() const { return static_cast<Color>(GetField<int8_t>(VT_COLOR, 2)); }
            const flatbuffers::Vector<flatbuffers::Offset<Weapon>> *weapons() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Weapon>> *>(VT_WEAPONS); }
            bool Verify(flatbuffers::Verifier &verifier) const {
                return VerifyTableStart(verifier) &&
                VerifyField<Vec3>(verifier, VT_POS) &&
                VerifyField<int16_t>(verifier, VT_MANA) &&
                VerifyField<int16_t>(verifier, VT_HP) &&
                VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
                verifier.Verify(name()) &&
                VerifyField<int8_t>(verifier, VT_COLOR) &&
                VerifyField<flatbuffers::uoffset_t>(verifier, VT_WEAPONS) &&
                verifier.Verify(weapons()) &&
                verifier.VerifyVectorOfTables(weapons()) &&
                verifier.EndTable();
            }
        };
        
        struct MonsterBuilder {
            flatbuffers::FlatBufferBuilder &fbb_;
            flatbuffers::uoffset_t start_;
            void add_pos(const Vec3 *pos) { fbb_.AddStruct(Monster::VT_POS, pos); }
            void add_mana(int16_t mana) { fbb_.AddElement<int16_t>(Monster::VT_MANA, mana, 150); }
            void add_hp(int16_t hp) { fbb_.AddElement<int16_t>(Monster::VT_HP, hp, 100); }
            void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Monster::VT_NAME, name); }
            void add_color(Color color) { fbb_.AddElement<int8_t>(Monster::VT_COLOR, static_cast<int8_t>(color), 2); }
            void add_weapons(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Weapon>>> weapons) { fbb_.AddOffset(Monster::VT_WEAPONS, weapons); }
            MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
            MonsterBuilder &operator=(const MonsterBuilder &);
            flatbuffers::Offset<Monster> Finish() {
                auto o = flatbuffers::Offset<Monster>(fbb_.EndTable(start_, 7));
                return o;
            }
        };
        
        inline flatbuffers::Offset<Monster> CreateMonster(flatbuffers::FlatBufferBuilder &_fbb,
                                                          const Vec3 *pos = 0,
                                                          int16_t mana = 150,
                                                          int16_t hp = 100,
                                                          flatbuffers::Offset<flatbuffers::String> name = 0,
                                                          Color color = Color_Blue,
                                                          flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Weapon>>> weapons = 0) {
            MonsterBuilder builder_(_fbb);
            builder_.add_weapons(weapons);
            builder_.add_name(name);
            builder_.add_pos(pos);
            builder_.add_hp(hp);
            builder_.add_mana(mana);
            builder_.add_color(color);
            return builder_.Finish();
        }
        
        struct Weapon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
            enum {
                VT_NAME = 4,
                VT_DAMAGE = 6
            };
            const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
            int16_t damage() const { return GetField<int16_t>(VT_DAMAGE, 0); }
            bool Verify(flatbuffers::Verifier &verifier) const {
                return VerifyTableStart(verifier) &&
                VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
                verifier.Verify(name()) &&
                VerifyField<int16_t>(verifier, VT_DAMAGE) &&
                verifier.EndTable();
            }
        };
        
        struct WeaponBuilder {
            flatbuffers::FlatBufferBuilder &fbb_;
            flatbuffers::uoffset_t start_;
            void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Weapon::VT_NAME, name); }
            void add_damage(int16_t damage) { fbb_.AddElement<int16_t>(Weapon::VT_DAMAGE, damage, 0); }
            WeaponBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
            WeaponBuilder &operator=(const WeaponBuilder &);
            flatbuffers::Offset<Weapon> Finish() {
                auto o = flatbuffers::Offset<Weapon>(fbb_.EndTable(start_, 2));
                return o;
            }
        };
        
        inline flatbuffers::Offset<Weapon> CreateWeapon(flatbuffers::FlatBufferBuilder &_fbb,
                                                        flatbuffers::Offset<flatbuffers::String> name = 0,
                                                        int16_t damage = 0) {
            WeaponBuilder builder_(_fbb);
            builder_.add_name(name);
            builder_.add_damage(damage);
            return builder_.Finish();
        }
        
        inline const MyGame::Sample::Monster *GetMonster(const void *buf) { return flatbuffers::GetRoot<MyGame::Sample::Monster>(buf); }
        
        inline bool VerifyMonsterBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<MyGame::Sample::Monster>(); }
        
        inline void FinishMonsterBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<MyGame::Sample::Monster> root) { fbb.Finish(root); }
        
    }  // namespace Sample
}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_MONSTER_MYGAME_SAMPLE_H_
