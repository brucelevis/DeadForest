// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETFIRSTPLAYERINFOS_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETFIRSTPLAYERINFOS_FPACKET_H_

#include "flatbuffers.h"

namespace fpacket {

struct Human;

struct PacketFirstPlayerInfos;

struct Human FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_POS_X = 8,
    VT_POS_Y = 10
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  float pos_x() const { return GetField<float>(VT_POS_X, 0.0f); }
  float pos_y() const { return GetField<float>(VT_POS_Y, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<float>(verifier, VT_POS_X) &&
           VerifyField<float>(verifier, VT_POS_Y) &&
           verifier.EndTable();
  }
};

struct HumanBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(Human::VT_ID, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Human::VT_NAME, name); }
  void add_pos_x(float pos_x) { fbb_.AddElement<float>(Human::VT_POS_X, pos_x, 0.0f); }
  void add_pos_y(float pos_y) { fbb_.AddElement<float>(Human::VT_POS_Y, pos_y, 0.0f); }
  HumanBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HumanBuilder &operator=(const HumanBuilder &);
  flatbuffers::Offset<Human> Finish() {
    auto o = flatbuffers::Offset<Human>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Human> CreateHuman(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   float pos_x = 0.0f,
   float pos_y = 0.0f) {
  HumanBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PacketFirstPlayerInfos FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_OWN = 4,
    VT_OTHERS = 6
  };
  const Human *own() const { return GetPointer<const Human *>(VT_OWN); }
  const flatbuffers::Vector<flatbuffers::Offset<Human>> *others() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Human>> *>(VT_OTHERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OWN) &&
           verifier.VerifyTable(own()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OTHERS) &&
           verifier.Verify(others()) &&
           verifier.VerifyVectorOfTables(others()) &&
           verifier.EndTable();
  }
};

struct PacketFirstPlayerInfosBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_own(flatbuffers::Offset<Human> own) { fbb_.AddOffset(PacketFirstPlayerInfos::VT_OWN, own); }
  void add_others(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Human>>> others) { fbb_.AddOffset(PacketFirstPlayerInfos::VT_OTHERS, others); }
  PacketFirstPlayerInfosBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketFirstPlayerInfosBuilder &operator=(const PacketFirstPlayerInfosBuilder &);
  flatbuffers::Offset<PacketFirstPlayerInfos> Finish() {
    auto o = flatbuffers::Offset<PacketFirstPlayerInfos>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PacketFirstPlayerInfos> CreatePacketFirstPlayerInfos(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Human> own = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Human>>> others = 0) {
  PacketFirstPlayerInfosBuilder builder_(_fbb);
  builder_.add_others(others);
  builder_.add_own(own);
  return builder_.Finish();
}

inline const fpacket::PacketFirstPlayerInfos *GetPacketFirstPlayerInfos(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketFirstPlayerInfos>(buf); }

inline bool VerifyPacketFirstPlayerInfosBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketFirstPlayerInfos>(); }

inline void FinishPacketFirstPlayerInfosBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketFirstPlayerInfos> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETFIRSTPLAYERINFOS_FPACKET_H_
