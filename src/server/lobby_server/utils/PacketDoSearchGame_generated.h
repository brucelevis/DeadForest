// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKETDOSEARCHGAME_FPACKET_H_
#define FLATBUFFERS_GENERATED_PACKETDOSEARCHGAME_FPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace fpacket {

struct PacketDoSearchGame;

struct PacketDoSearchGame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MODE = 4
  };
  int32_t mode() const { return GetField<int32_t>(VT_MODE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct PacketDoSearchGameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(int32_t mode) { fbb_.AddElement<int32_t>(PacketDoSearchGame::VT_MODE, mode, 0); }
  PacketDoSearchGameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PacketDoSearchGameBuilder &operator=(const PacketDoSearchGameBuilder &);
  flatbuffers::Offset<PacketDoSearchGame> Finish() {
    auto o = flatbuffers::Offset<PacketDoSearchGame>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<PacketDoSearchGame> CreatePacketDoSearchGame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t mode = 0) {
  PacketDoSearchGameBuilder builder_(_fbb);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline const fpacket::PacketDoSearchGame *GetPacketDoSearchGame(const void *buf) { return flatbuffers::GetRoot<fpacket::PacketDoSearchGame>(buf); }

inline bool VerifyPacketDoSearchGameBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpacket::PacketDoSearchGame>(); }

inline void FinishPacketDoSearchGameBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpacket::PacketDoSearchGame> root) { fbb.Finish(root); }

}  // namespace fpacket

#endif  // FLATBUFFERS_GENERATED_PACKETDOSEARCHGAME_FPACKET_H_
